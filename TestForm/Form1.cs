
//▒██   ██▒▒██   ██▒▒██   ██▒   ▄▄▄█████▓ ██░ ██ ▓█████    ▓█████▄  ▄▄▄       ██▀███   ██ ▄█▀ ██▓███   ██▀███   ▒█████    ▄████  ██▀███   ▄▄▄       ███▄ ▄███▓▓█████  ██▀███     ▒██   ██▒▒██   ██▒▒██   ██▒
//▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░   ▓  ██▒ ▓▒▓██░ ██▒▓█   ▀    ▒██▀ ██▌▒████▄    ▓██ ▒ ██▒ ██▄█▒ ▓██░  ██▒▓██ ▒ ██▒▒██▒  ██▒ ██▒ ▀█▒▓██ ▒ ██▒▒████▄    ▓██▒▀█▀ ██▒▓█   ▀ ▓██ ▒ ██▒   ▒▒ █ █ ▒░▒▒ █ █ ▒░▒▒ █ █ ▒░
//░░  █   ░░░  █   ░░░  █   ░   ▒ ▓██░ ▒░▒██▀▀██░▒███      ░██   █▌▒██  ▀█▄  ▓██ ░▄█ ▒▓███▄░ ▓██░ ██▓▒▓██ ░▄█ ▒▒██░  ██▒▒██░▄▄▄░▓██ ░▄█ ▒▒██  ▀█▄  ▓██    ▓██░▒███   ▓██ ░▄█ ▒   ░░  █   ░░░  █   ░░░  █   ░
// ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒    ░ ▓██▓ ░ ░▓█ ░██ ▒▓█  ▄    ░▓█▄   ▌░██▄▄▄▄██ ▒██▀▀█▄  ▓██ █▄ ▒██▄█▓▒ ▒▒██▀▀█▄  ▒██   ██░░▓█  ██▓▒██▀▀█▄  ░██▄▄▄▄██ ▒██    ▒██ ▒▓█  ▄ ▒██▀▀█▄      ░ █ █ ▒  ░ █ █ ▒  ░ █ █ ▒ 
//▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒     ▒██▒ ░ ░▓█▒░██▓░▒████▒   ░▒████▓  ▓█   ▓██▒░██▓ ▒██▒▒██▒ █▄▒██▒ ░  ░░██▓ ▒██▒░ ████▓▒░░▒▓███▀▒░██▓ ▒██▒ ▓█   ▓██▒▒██▒   ░██▒░▒████▒░██▓ ▒██▒   ▒██▒ ▒██▒▒██▒ ▒██▒▒██▒ ▒██▒
//▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░     ▒ ░░    ▒ ░░▒░▒░░ ▒░ ░    ▒▒▓  ▒  ▒▒   ▓▒█░░ ▒▓ ░▒▓░▒ ▒▒ ▓▒▒▓▒░ ░  ░░ ▒▓ ░▒▓░░ ▒░▒░▒░  ░▒   ▒ ░ ▒▓ ░▒▓░ ▒▒   ▓▒█░░ ▒░   ░  ░░░ ▒░ ░░ ▒▓ ░▒▓░   ▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░▒▒ ░ ░▓ ░
//░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░       ░     ▒ ░▒░ ░ ░ ░  ░    ░ ▒  ▒   ▒   ▒▒ ░  ░▒ ░ ▒░░ ░▒ ▒░░▒ ░       ░▒ ░ ▒░  ░ ▒ ▒░   ░   ░   ░▒ ░ ▒░  ▒   ▒▒ ░░  ░      ░ ░ ░  ░  ░▒ ░ ▒░   ░░   ░▒ ░░░   ░▒ ░░░   ░▒ ░
// ░    ░   ░    ░   ░    ░       ░       ░  ░░ ░   ░       ░ ░  ░   ░   ▒     ░░   ░ ░ ░░ ░ ░░         ░░   ░ ░ ░ ░ ▒  ░ ░   ░   ░░   ░   ░   ▒   ░      ░      ░     ░░   ░     ░    ░   ░    ░   ░    ░  
// ░    ░   ░    ░   ░    ░               ░  ░  ░   ░  ░      ░          ░  ░   ░     ░  ░               ░         ░ ░        ░    ░           ░  ░       ░      ░  ░   ░         ░    ░   ░    ░   ░    ░  
//                                                          ░                                                        

//=======================================================================================
//          Advanced Window For PeXploit
//=======================================================================================



using System;
using System.Text.RegularExpressions;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.IO;
using System.Windows.Forms;
using System.Threading;

namespace TestForm
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        #region << Private Events >>
        //PS3xport related
        static string CMD(string args)
        {
            string cmdbat = "cd " + Application.StartupPath.Replace("\\", "/") + "\r\n";
            cmdbat += args + " >> out.txt\r\n";
            cmdbat += "exit\r\n";
            File.WriteAllText(Application.StartupPath + "\\cmd.bat", cmdbat);

            System.Diagnostics.Process process = new System.Diagnostics.Process();

            System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
            startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            startInfo.Arguments = "";
            startInfo.UseShellExecute = true;
            startInfo.WorkingDirectory = Application.StartupPath;
            startInfo.CreateNoWindow = true;
            startInfo.FileName = Application.StartupPath + "\\cmd.bat";
            process.StartInfo = startInfo;

            process.Start();
            process.WaitForExit();
            System.Threading.Thread.Sleep(5000);
            while (!File.Exists(Application.StartupPath + @"\\out.txt"))
                Thread.Sleep(100);
            string cmdOut = File.ReadAllText(Application.StartupPath + @"\\out.txt");
            File.Delete(Application.StartupPath + "\\cmd.bat");
            return cmdOut;

        }

        //TreeView
        private void ListDirectory(TreeView treeView, string path)
        {
            treeView.Nodes.Clear();
            var rootDirectoryInfo = new DirectoryInfo(path);
            treeView.Nodes.Add(CreateDirectoryNode(rootDirectoryInfo));
        }

        private static TreeNode CreateDirectoryNode(DirectoryInfo directoryInfo)
        {
            var directoryNode = new TreeNode(directoryInfo.Name);
            foreach (var directory in directoryInfo.GetDirectories())
            {
                directoryNode.Nodes.Add(CreateDirectoryNode(directory));
            }
            foreach (var file in directoryInfo.GetFiles())
            {
                directoryNode.Nodes.Add(new TreeNode(file.Name));
            }
            return directoryNode;
        }

        #region <<Tooltips >>

        private void toolStripMenuItemCopy_Click(object sender, EventArgs e)
        {
            if (treeView.SelectedNode != null)
            {
                try
                {
                    MessageBox.Show(treeView.SelectedNode.FullPath.ToString());
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
        }

        private void toolStripMenuItemPaste_Click(object sender, EventArgs e)
        {
            if (treeView.SelectedNode != null)
            {
                bool copy = false;
                try
                {
                    DirectoryInfo[] directories = directoryInfo.GetDirectories();
                    if (directories.Length > 0)
                    {
                        foreach (DirectoryInfo directory in directories)
                        {
                            if (directory.Name == treeView.SelectedNode.Text && Clipboard.ContainsFileDropList())
                            {
                                foreach (string file in Clipboard.GetFileDropList())
                                {
                                    string targetDir = directoryInfo.FullName + @"\" + directory.Name;
                                    File.Copy(Path.Combine(file.Replace(Path.GetFileName(file), ""), Path.GetFileName(file)), Path.Combine(targetDir, Path.GetFileName(file)), true);
                                }
                                copy = true;
                            }
                        }
                    }

                    if (copy)
                    {
                        foreach (string file in Clipboard.GetFileDropList())
                        {
                            TreeNode node = treeView.Nodes[0].Nodes[treeView.SelectedNode.Index].Nodes.Add(Path.GetFileName(file));
                            SetImageExtension(file, node);
                        }
                        copy = false;
                    }
                }
                catch (Exception ex)
                {
                    copy = false;
                    MessageBox.Show(ex.Message);
                }
            }
        }

        private void toolStripMenuItemDelete_Click(object sender, EventArgs e)
        {
            if (treeView.SelectedNode != null)
            {
                bool deleted = false;
                try
                {
                    DirectoryInfo[] directories = directoryInfo.GetDirectories();
                    foreach (FileInfo file in directoryInfo.GetFiles())
                    {
                        if (file.Exists && file.Name == treeView.SelectedNode.Text)
                        {
                            file.Delete();
                            deleted = true;
                        }
                    }

                    if (directories.Length > 0)
                    {
                        foreach (DirectoryInfo directory in directories)
                        {
                            foreach (FileInfo file in directory.GetFiles())
                            {
                                if (file.Exists && file.Name == treeView.SelectedNode.Text)
                                {
                                    file.Delete();
                                    deleted = true;
                                }
                            }

                            if (treeView.SelectedNode.Text == directory.Name)
                            {
                                foreach (FileInfo file in directory.GetFiles())
                                {
                                    if (file.Exists)
                                        file.Delete();
                                }
                                directory.Delete();
                                deleted = true;
                            }
                        }
                    }

                    if (deleted)
                        treeView.SelectedNode.Remove();
                }
                catch (Exception ex)
                {
                    deleted = false;
                    MessageBox.Show(ex.Message);
                }
            }
        }

        ExplorerProperties properties;

        private void toolStripMenuItemProperties_Click(object sender, EventArgs e)
        {
            if (treeView.SelectedNode != null)
            {
                if (properties != null)
                    properties.Close();

                DirectoryInfo[] directories = directoryInfo.GetDirectories();

                foreach (DirectoryInfo directory in directories)
                {
                    if (!treeView.SelectedNode.Text.Contains(".")) // Folder, not a file
                    {
                        if (directory.Name == treeView.SelectedNode.Text)
                        {
                            properties = new ExplorerProperties(directory.Name, directory.FullName, CalculateBytes(directory.GetFiles("*.*", SearchOption.AllDirectories).Sum(file => file.Length)) + " (" + directory.GetFiles("*.*", SearchOption.AllDirectories).Sum(file => file.Length).ToString() + " bytes)");
                            properties.Show();
                        }
                    }
                    else
                    {
                        foreach (FileInfo file in directoryInfo.GetFiles())
                        {
                            if (file.Name == treeView.SelectedNode.Text)
                            {
                                properties = new ExplorerProperties(file.Name, file.FullName, CalculateBytes(file.Length) + " (" + file.Length + " bytes)");
                                properties.Show();
                                return;
                            }
                        }

                        foreach (FileInfo file in directory.GetFiles())
                        {
                            if (file.Name == treeView.SelectedNode.Text)
                            {
                                properties = new ExplorerProperties(file.Name, file.FullName, CalculateBytes(file.Length) + " (" + file.Length + " bytes)");
                                properties.Show();
                            }
                        }
                    }
                }
            }
        }

        #endregion <<Tooltips >>

        #endregion << Private Events >>

        #region << Vars >>

        List<string> FileInstall = new List<string>();
        int FileCount = 0;
        DirectoryInfo directoryInfo = new DirectoryInfo(Application.StartupPath +@"/PS3");

        #endregion << Vars >>

        #region << Backgroundworkers >>

        private void FirstLoad_DoWork(object sender, DoWorkEventArgs e)
        {
            Loader loading = new Loader(FirstLoad);
            loading.ShowDialog();
            loading.Focus();
        }


        #endregion << Backgroundworkers >>

        private void InitialLoad()
        {
            if (FirstLoad.IsBusy == false)
            {
                FirstLoad.RunWorkerAsync();
            }
            Loader.INFO = "Welcome Initilizing";

            Loader.INFO = "Reading Archive.Dat";

            if (File.Exists(Application.StartupPath + @"/archive.dat"))
            { 
                Archive1Worker.RunWorkerAsync();
            }
            string[] lines = System.IO.File.ReadAllLines(Application.StartupPath + "\\out.txt");
            string cleanline = "";
            if (File.Exists("out.txt"))
            {
                //do the directory creation first else there will be ERRORS !!
                if (FirstLoad.IsBusy == false)
                {
                    FirstLoad.RunWorkerAsync();
                }
                
                Loader.INFO = "Loading dev_hhd0 directories";
                foreach (string line in lines)
                {
                    if (line.Contains("Backup id :"))
                    {
                        Loader.INFO = "Loading Backup ID";
                        cleanline = line.Substring(line.IndexOf(':'));
                        if(cleanline.Contains(":"))
                        {
                            cleanline = cleanline.Replace(":", "");
                        }
                        lblBackupID.Text = cleanline.ToUpper() ;
                    }
                    if (line.Contains("Total files :"))
                    {
                        Loader.INFO = "Counting Files ";
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                        {
                            cleanline = cleanline.Replace(":", "");
                        }
                        lblTotalFiles.Text = cleanline.ToUpper();
                    }
                    if (line.Contains("Total directories :"))
                    {
                        Loader.INFO = "Counting Files ";
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                        {
                            cleanline = cleanline.Replace(":", "");
                        }
                        label3.Text ="Total directories :"+ cleanline.ToUpper();
                    }
                    if (line.Contains("Total archive size :"))
                    {
                        Loader.INFO = "Counting Files ";
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                        {
                            cleanline = cleanline.Replace(":", "");
                        }
                        label4.Text ="Total archive size :" + cleanline.ToUpper();
                    }
                    if (line.Contains("Your Open PSID :"))
                    {
                        Loader.INFO = "Counting Files ";
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                        {
                            cleanline ="Your Open PSID :"+ cleanline.Replace(":", "");
                        }
                        label5.Text = cleanline.ToUpper();
                    }
                    //
                    if (line.Contains("Total archive size :"))
                    {
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                            cleanline = cleanline.Replace(":", "");
                        label4.Text = "Total archive size : " + cleanline;
                    }
                    if (line.Contains("Total filesize of the copy-protected content :"))
                    {
                        cleanline = line.Substring(line.IndexOf(':'));
                        if (cleanline.Contains(":"))
                            cleanline = cleanline.Replace(":", "");
                        label6.Text = "Total filesize of the copy-protected content :" + cleanline;
                    }
                    if(File.Exists(Application.StartupPath + "\\idps.bin"))
                    {
                        byte[] idps = System.IO.File.ReadAllBytes(Application.StartupPath + "\\idps.bin");
                        label7.Text = "Your IDPS : " + idps;
                    }
                    else if (!File.Exists(Application.StartupPath + "\\idps.bin"))
                    {
                        label7.Text = "Your IDPS : Is Not Found";
                    }

                    if (line.Contains("drwx"))
                    {
                        if (line.Contains("/dev_hdd0/"))
                        {
                            string appstart = Application.StartupPath + @"/PS3/";
                            cleanline = line.Substring(line.IndexOf('/'));
                            try
                            {
                                if (!Directory.Exists(appstart + cleanline))
                                {
                                    Directory.CreateDirectory(appstart + cleanline);
                                }
                            }
                            catch(Exception e)
                            {
                                MessageBox.Show(e.Message);
                            }
                        }
                    }


                }
            }
            //do file creation
            Loader.INFO = ("Loading dev_hdd0 /Files");
            System.Threading.Thread.Sleep(1000);
            foreach (string line in lines)
            {
                if (line.Contains("Total archive size :"))
                {
                    cleanline = line.Substring(line.IndexOf(':'));
                    if (cleanline.Contains(":"))
                        cleanline = cleanline.Replace(":", "");
                    label4.Text = "Total archive size : " + cleanline;
                }
                if (line.Contains("-rw") && !line.Contains("drwx"))
                {
                    if (line.Contains("/dev_hdd0/"))
                    {
                        string appstart = Application.StartupPath + @"/PS3/";
                        cleanline = line.Substring(line.IndexOf('/'));
                        try
                        {
                            if (!File.Exists(appstart + cleanline))
                            {
                                File.Create(appstart + cleanline);
                            }
                        }
                        catch(Exception e)
                        {
                            MessageBox.Show(e.Message);
                        }
                    }
                }

            }
            Loader.INFO = ("Loading Items");
            if (Directory.Exists(Application.StartupPath + @"/PS3"))
            {
                try
                {
                    ListDirectory(treeView, Application.StartupPath + @"/PS3");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
            }
            FirstLoad.CancelAsync();
            FirstLoad.Dispose();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            InitialLoad();
        }

        #region Calculation
        private string CalculateBytes(long count)
        {
            string[] sizeNames = { " B", " KB", " MB", " GB", " TB", " PB", " EB" };
            if (count == 0)
                return "0" + sizeNames[0];
            long bytes = Math.Abs(count);
            int log = Convert.ToInt32(Math.Floor(Math.Log(bytes, 1024)));
            double number = Math.Round(bytes / Math.Pow(1024, log), 1);
            return (Math.Sign(count) * number).ToString() + sizeNames[log];
        }
        #endregion

        #region Extensions
        private void SetImageExtension(string name, TreeNode _node)
        {
            if (name.Contains("xml"))
                _node.ImageIndex = _node.SelectedImageIndex = 2;
            else if (name.Contains("txt"))
                _node.ImageIndex = _node.SelectedImageIndex = 3;
        }
        #endregion


       


        private void Archive1Worker_DoWork(object sender, DoWorkEventArgs e)
        {
            string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ReadIndex ./archive.dat";
            string retun = CMD(command);
            string[] lines = System.IO.File.ReadAllLines(Application.StartupPath + "\\out.txt");
        }

      

        #region << Advanced Menu >>

        #region << Add Data >>

        #region << File >>

        #endregion << File >>

        #region << Folder >>

        #endregion << Folder >>


        #endregion << Add Data >>

        #region << Remove Data >>

        #endregion << Remove Data >>

        #region << Extras >>

        #region << Extract PSID >>

        private void button4_Click(object sender, EventArgs e)
        {
            string command = "ps3xport.exe ExtractPSID ./ psid.bin";
            string retun = CMD(command);
            if (File.Exists(Application.StartupPath + @"\\psid.bin"))
            {
                MessageBox.Show("PSID Extracted", "Completed", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void button4_MouseEnter(object sender, EventArgs e)
        {
            lblExecuting.Text = "This will extract your psid from your backup";
        }

        private void button4_MouseLeave(object sender, EventArgs e)
        {
            lblExecuting.Text = "";
        }

        #endregion << Extract PSID >>

        #region << Read Index's >>

        private void button5_Click(object sender, EventArgs e)
        {
            lblExecuting.Text = "Reading Info From Archive";
            extrabar.PerformStep();
            string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin ReadIndex ./archive.dat";
            string retun = CMD(command);
            extrabar.PerformStep();
            if (!Directory.Exists(Application.StartupPath + @"\\Extracted"))
                Directory.CreateDirectory(Application.StartupPath + @"\\Extracted");
            extrabar.PerformStep();
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\Archive.txt");
            extrabar.PerformStep();
            command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadIndex ./archive2.dat";
            retun = CMD(command);
            if (File.Exists(Application.StartupPath + "\\out.txt"))
                File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\Archive2.txt");
            extrabar.PerformStep();
            lblExecuting.Text = ("Saved To Extracted!");
        }

        private void button5_MouseEnter(object sender, EventArgs e)
        {
            lblExecuting.Text = "This will dump info from your backup";
        }

        #endregion << Read Index's >>

        #region << Read Data >>

        private void button6_Click(object sender, EventArgs e)
        {
            lblExecuting.Text = "Reading Data From Archive";

            #region << Archive.dat >>
            for (int i = 0; i <= 9; i++)
            {
                extrabar.Value = 0;
                extrabar.PerformStep();
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted\\ReadData"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted\\ReadData");
                extrabar.PerformStep();
                string command = @"ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadData ./archive_0" + i;
                lblInfoDisplay.Text = "Extracting " + i + "/9";
                string retun = CMD(command);
                extrabar.PerformStep();
                if (File.Exists(Application.StartupPath + "\\out.txt"))
                    File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\ReadData\\Archive_0" + i + ".txt");
                extrabar.PerformStep();
            }
            for (int i = 10; i <= 99; i++)
            {
                extrabar.Value = 0;
                extrabar.PerformStep();
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted\\ReadData"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted\\ReadData");
                extrabar.PerformStep();
                string command = @"ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadData ./archive_" + i;
                lblInfoDisplay.Text = "Extracting " + i + "/99";
                string retun = CMD(command);
                extrabar.PerformStep();
                if (File.Exists(Application.StartupPath + "\\out.txt"))
                    File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\ReadData\\Archive_" + i + ".txt");
                extrabar.PerformStep();
            }
            #endregion << Archive.dat >>

            #region << Archive2.dat >>
            for (int i = 0; i <= 9; i++)
            {
                extrabar.Value = 0;
                extrabar.PerformStep();
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted\\ReadData"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted\\ReadData");
                extrabar.PerformStep();
                string command = @"ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadData ./archive2_0" + i;
                lblInfoDisplay.Text = "Extracting " + i + "/9";
                string retun = CMD(command);
                extrabar.PerformStep();
                if (File.Exists(Application.StartupPath + "\\out.txt"))
                    File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\ReadData\\Archive2_0" + i + ".txt");
                extrabar.PerformStep();
            }
            for (int i = 10; i <= 99; i++)
            {
                extrabar.Value = 0;
                extrabar.PerformStep();
                if (!Directory.Exists(Application.StartupPath + @"\\Extracted\\ReadData"))
                    Directory.CreateDirectory(Application.StartupPath + @"\\Extracted\\ReadData");
                extrabar.PerformStep();
                string command = @"ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin SetDeviceID idps.bin ReadData ./archive2_" + i;
                lblInfoDisplay.Text = "Extracting " + i + "/99";
                string retun = CMD(command);
                extrabar.PerformStep();
                if (File.Exists(Application.StartupPath + "\\out.txt"))
                    File.Move(Application.StartupPath + "\\out.txt", Application.StartupPath + "\\Extracted\\ReadData\\Archive2_" + i + ".txt");
                extrabar.PerformStep();
            }
            lblExecuting.Text = "";
            #endregion << Archive2.dat >>
        }

        private void button6_MouseEnter(object sender, EventArgs e)
        {
            lblExecuting.Text = "Read Data From Archive";
        }

        private void button6_MouseLeave(object sender, EventArgs e)
        {
            lblExecuting.Text = " ";
        }

        #endregion << Read Data >>

        #region << Install File >>

        private void button2_Click(object sender, EventArgs e)
        {
            pbInstalFIle.Visible = true;
            lblInstallFile.Visible = true;
            lblTotal.Visible = true;
            int thiscount = 0;
            foreach (string item in FileInstall)
            {
                thiscount++;
                lblInstallFile.Text = "Copying ";
                lblTotal.Text = thiscount + "\\" + FileCount;
            }
            pbInstalFIle.Visible = false;
            lblInstallFile.Visible = false;
            lblTotal.Visible = false;
            try
            {
                InstallFile.RunWorkerAsync();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Install error - " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            //Wanted to do this but decided not to since each file needs its own location
            // FileCount++;
            // FileInstall.Add(FileLocation.Text);

            ArchiveBrowserFile.Title = "Select File";
            ArchiveBrowserFile.Filter = "All Files |*.*";
            ArchiveBrowserFile.InitialDirectory = System.Environment.SpecialFolder.MyComputer.ToString();
            if (ArchiveBrowserFile.ShowDialog() == DialogResult.OK)
            {
                FileLocation.Text = ArchiveBrowserFile.FileName.ToString();
                FileInfo fi = new FileInfo(FileLocation.Text);
                string dirPath = fi.Directory.FullName.Replace("\\", "/");
            }
        }

        private void InstallFile_DoWork(object sender, DoWorkEventArgs e)
        {
            lblInstallFile.Invoke(new Action(() => lblInstallFile.Text = ("Installing File")));
            string Filepath = FileLocation.Text;
            string Savepath = FileSaveLocation.Text;
            string Filename = Filepath.Split(Path.DirectorySeparatorChar).Last();

            if (!Directory.Exists(Application.StartupPath + @"\\ADVC"))
            {
                Directory.CreateDirectory(Application.StartupPath + @"\\ADVC");
            }

            if (File.Exists(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename))
            {
                File.Delete(Application.StartupPath + @"\\ADVC\\" + Savepath + Filename);
            }
            try
            {
                if (!Directory.Exists(Application.StartupPath + @"\\ADVC" + Savepath))
                {
                    Directory.CreateDirectory(Application.StartupPath + @"\\ADVC" + Savepath);
                }
                File.Copy(Filepath, Application.StartupPath + @"\\ADVC" + Savepath + "\\", true);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Savepath could not be coppied " + ex.Message, "Copy Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            try
            {
                lblInstallFile.Invoke(new Action(() => lblInstallFile.Text = ("Removing Original File")));
                string command = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin DeleteFile ./ " + Savepath + Filename;
                string retun = CMD(command);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Could not remove the data -" + ex.Message);
            }
            try
            {
                string commande = "ps3xport.exe ExtractPSID ./ psid.bin SetPSID psid.bin Add ./ ADVC";
                string retunn = CMD(commande);
                lblInstallFile.Invoke(new Action(() => lblInstallFile.Text = ("Installed Enjoy")));
            }
            catch (Exception ex)
            {
                MessageBox.Show("Install Failed  - " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion << Install File >>

        #region << Folder Install >>
        private void button2_Click_1(object sender, EventArgs e)
        {
           
        }
        #endregion << Folder Install >>

   

        #endregion << Extras >>



        #endregion << Advanced Menu >>


    }
}
